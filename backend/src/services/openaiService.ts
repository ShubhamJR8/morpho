import OpenAI from 'openai';
import { S3Service } from './s3Service';

export class OpenAIService {
  private openai: OpenAI;
  private s3Service: S3Service;

  constructor() {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
    this.s3Service = new S3Service();
  }

  async editImage(imageUrl: string, prompt: string): Promise<string> {
    try {
      console.log('Starting image editing with OpenAI...');
      
      // Download the image from URL and convert to buffer
      const response = await fetch(imageUrl);
      const buffer = await response.arrayBuffer();
      const imageFile = new File([new Uint8Array(buffer)], 'image.png', { type: 'image/png' });
      
      const openaiResponse = await this.openai.images.edit({
        image: imageFile,
        prompt: prompt,
        n: 1,
        size: '1024x1024',
        response_format: 'url',
      });

      if (!openaiResponse.data || openaiResponse.data.length === 0) {
        throw new Error('No image generated by OpenAI');
      }

      const generatedImageUrl = openaiResponse.data[0].url;
      if (!generatedImageUrl) {
        throw new Error('Generated image URL is undefined');
      }

      // Download the generated image and upload to S3
      const generatedResponse = await fetch(generatedImageUrl);
      const generatedBuffer = await generatedResponse.arrayBuffer();
      const generatedImageBuffer = Buffer.from(generatedBuffer);

      // Upload to S3 and return the S3 URL
      const s3Url = await this.s3Service.uploadGeneratedImage(generatedImageBuffer, 'openai-generated');
      
      console.log('Image editing completed successfully');
      return s3Url;

    } catch (error) {
      console.error('OpenAI image editing error:', error);
      throw new Error(`Failed to edit image: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  async generateVariation(imageUrl: string): Promise<string> {
    try {
      console.log('Starting image variation generation with OpenAI...');
      
      // Download the image from URL and convert to buffer
      const response = await fetch(imageUrl);
      const buffer = await response.arrayBuffer();
      const imageFile = new File([new Uint8Array(buffer)], 'image.png', { type: 'image/png' });
      
      const openaiResponse = await this.openai.images.createVariation({
        image: imageFile,
        n: 1,
        size: '1024x1024',
        response_format: 'url',
      });

      if (!openaiResponse.data || openaiResponse.data.length === 0) {
        throw new Error('No image variation generated by OpenAI');
      }

      const generatedImageUrl = openaiResponse.data[0].url;
      if (!generatedImageUrl) {
        throw new Error('Generated image URL is undefined');
      }

      // Download the generated image and upload to S3
      const generatedResponse = await fetch(generatedImageUrl);
      const generatedBuffer = await generatedResponse.arrayBuffer();
      const generatedImageBuffer = Buffer.from(generatedBuffer);

      // Upload to S3 and return the S3 URL
      const s3Url = await this.s3Service.uploadGeneratedImage(generatedImageBuffer, 'openai-variation');
      
      console.log('Image variation generation completed successfully');
      return s3Url;

    } catch (error) {
      console.error('OpenAI image variation error:', error);
      throw new Error(`Failed to generate image variation: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
}